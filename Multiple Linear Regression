{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":12815735,"sourceType":"datasetVersion","datasetId":8103925},{"sourceId":12815983,"sourceType":"datasetVersion","datasetId":8104122},{"sourceId":4289678,"sourceType":"datasetVersion","datasetId":2527538}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import (\n    accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T18:22:50.568061Z","iopub.execute_input":"2025-09-02T18:22:50.568621Z","iopub.status.idle":"2025-09-02T18:22:50.572906Z","shell.execute_reply.started":"2025-09-02T18:22:50.568592Z","shell.execute_reply":"2025-09-02T18:22:50.572264Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"data = pd.DataFrame({\n    \"Age\": [25, 30, 35, 40, 45],\n    \"Height\": [165, 170, 175, 180, 185],\n    \"Weight\": [70, 80, 90, 85, 95],\n    \"TimeOnExercise\": [1, 2, 3, 4, 5],\n    \"WeightReduction\": [2, 4, 7, 8, 10]\n})\n\nX = data[[\"Age\", \"Height\", \"Weight\", \"TimeOnExercise\"]]\ny = data[\"WeightReduction\"]\n\nmodel = LinearRegression()\nmodel.fit(X, y)\n\nprint(\"Coefficients:\", model.coef_)\nprint(\"Intercept:\", model.intercept_)\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-02T18:22:43.825055Z","iopub.execute_input":"2025-09-02T18:22:43.825350Z","iopub.status.idle":"2025-09-02T18:22:43.904105Z","shell.execute_reply.started":"2025-09-02T18:22:43.825308Z","shell.execute_reply":"2025-09-02T18:22:43.903350Z"}},"outputs":[{"name":"stdout","text":"Coefficients: [0.14814815 0.14814815 0.08888889 0.02962963]\nIntercept: -32.466666666666676\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"file_path = \"/kaggle/input/house-price/house_price_train.csv\"\ndf = pd.read_csv(file_path)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T18:22:43.904898Z","iopub.execute_input":"2025-09-02T18:22:43.905107Z","iopub.status.idle":"2025-09-02T18:22:43.937697Z","shell.execute_reply.started":"2025-09-02T18:22:43.905080Z","shell.execute_reply":"2025-09-02T18:22:43.937089Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"df.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T18:22:43.939446Z","iopub.execute_input":"2025-09-02T18:22:43.939670Z","iopub.status.idle":"2025-09-02T18:22:43.945081Z","shell.execute_reply.started":"2025-09-02T18:22:43.939652Z","shell.execute_reply":"2025-09-02T18:22:43.944379Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"Index(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n       'SaleCondition', 'SalePrice'],\n      dtype='object')"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"df2 = pd.get_dummies(df, drop_first=True)\nX = df2[['Street','Alley','HouseStyle','YearBuilt','OverallCond','RoofStyle','SaleCondition']]\nY = df2['SalePrice']\nmodel = LinearRegression()\nmodel.fit(X,Y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T18:22:43.945950Z","iopub.execute_input":"2025-09-02T18:22:43.946186Z","iopub.status.idle":"2025-09-02T18:22:43.998025Z","shell.execute_reply.started":"2025-09-02T18:22:43.946166Z","shell.execute_reply":"2025-09-02T18:22:43.997098Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/351229423.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mdf2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_dummies\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdrop_first\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf2\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Street'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Alley'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'HouseStyle'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'YearBuilt'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'OverallCond'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'RoofStyle'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'SaleCondition'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mY\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf2\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'SalePrice'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLinearRegression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4106\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4107\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4108\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_indexer_strict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4109\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4110\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6198\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6199\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6200\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_if_missing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6201\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6202\u001b[0m         \u001b[0mkeyarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6250\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6251\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6252\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{not_found} not in index\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6253\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6254\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0moverload\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"['Street', 'Alley', 'HouseStyle', 'RoofStyle', 'SaleCondition'] not in index\""],"ename":"KeyError","evalue":"\"['Street', 'Alley', 'HouseStyle', 'RoofStyle', 'SaleCondition'] not in index\"","output_type":"error"}],"execution_count":9},{"cell_type":"code","source":"# Example dataset (Position Levels vs Salary)\ndata = pd.DataFrame({\n    \"Level\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    \"Salary\": [45000, 50000, 60000, 80000, 110000,\n               150000, 200000, 300000, 500000, 1000000]\n})\n\nX = data[[\"Level\"]]\ny = data[\"Salary\"]\n\n# Linear Regression model (for comparison)\nlin_reg = LinearRegression()\nlin_reg.fit(X, y)\n\n# Polynomial Regression (degree=4)\npoly = PolynomialFeatures(degree=4)\nX_poly = poly.fit_transform(X)\n\npoly_reg = LinearRegression()\npoly_reg.fit(X_poly, y)\n\n# Predictions\nX_range = np.linspace(1, 10, 100).reshape(-1, 1)\ny_lin_pred = lin_reg.predict(X_range)\ny_poly_pred = poly_reg.predict(poly.transform(X_range))\n\n# Visualization\nplt.scatter(X, y, color=\"blue\", label=\"Actual Data\")\nplt.plot(X_range, y_lin_pred, color=\"green\", label=\"Linear Regression\")\nplt.plot(X_range, y_poly_pred, color=\"red\", label=\"Polynomial Regression (deg=4)\")\nplt.xlabel(\"Position Level\")\nplt.ylabel(\"Salary\")\nplt.legend()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T18:22:43.998545Z","iopub.status.idle":"2025-09-02T18:22:43.998744Z","shell.execute_reply.started":"2025-09-02T18:22:43.998648Z","shell.execute_reply":"2025-09-02T18:22:43.998657Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"file_path1 = \"/kaggle/input/diabetes-dataset/diabetes.csv\"\ndf2 = pd.read_csv(file_path1)\ndf2.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T18:22:55.958105Z","iopub.execute_input":"2025-09-02T18:22:55.958696Z","iopub.status.idle":"2025-09-02T18:22:55.971528Z","shell.execute_reply.started":"2025-09-02T18:22:55.958674Z","shell.execute_reply":"2025-09-02T18:22:55.970789Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n0            6      148             72             35        0  33.6   \n1            1       85             66             29        0  26.6   \n2            8      183             64              0        0  23.3   \n3            1       89             66             23       94  28.1   \n4            0      137             40             35      168  43.1   \n\n   DiabetesPedigreeFunction  Age  Outcome  \n0                     0.627   50        1  \n1                     0.351   31        0  \n2                     0.672   32        1  \n3                     0.167   21        0  \n4                     2.288   33        1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pregnancies</th>\n      <th>Glucose</th>\n      <th>BloodPressure</th>\n      <th>SkinThickness</th>\n      <th>Insulin</th>\n      <th>BMI</th>\n      <th>DiabetesPedigreeFunction</th>\n      <th>Age</th>\n      <th>Outcome</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>6</td>\n      <td>148</td>\n      <td>72</td>\n      <td>35</td>\n      <td>0</td>\n      <td>33.6</td>\n      <td>0.627</td>\n      <td>50</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>85</td>\n      <td>66</td>\n      <td>29</td>\n      <td>0</td>\n      <td>26.6</td>\n      <td>0.351</td>\n      <td>31</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8</td>\n      <td>183</td>\n      <td>64</td>\n      <td>0</td>\n      <td>0</td>\n      <td>23.3</td>\n      <td>0.672</td>\n      <td>32</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>89</td>\n      <td>66</td>\n      <td>23</td>\n      <td>94</td>\n      <td>28.1</td>\n      <td>0.167</td>\n      <td>21</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>137</td>\n      <td>40</td>\n      <td>35</td>\n      <td>168</td>\n      <td>43.1</td>\n      <td>2.288</td>\n      <td>33</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"x_train , x_test , y_train , y_test = train_test_split(\n    df2.drop('Outcome', axis=1),\n    df2['Outcome'],\n    test_size = 0.2,\n    random_state = 30\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T18:22:58.058161Z","iopub.execute_input":"2025-09-02T18:22:58.058519Z","iopub.status.idle":"2025-09-02T18:22:58.068202Z","shell.execute_reply.started":"2025-09-02T18:22:58.058497Z","shell.execute_reply":"2025-09-02T18:22:58.067565Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"scaler = StandardScaler()\nX_train = scaler.fit_transform(x_train)\nX_test = scaler.transform(x_test)\n\nmodel = LogisticRegression(random_state=42)\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\n\naccuracy = accuracy_score(y_test, y_pred)\nconf_matrix = confusion_matrix(y_test, y_pred)\nclass_report = classification_report(y_test, y_pred)\n\nprint(\"Accuracy:\", accuracy)\nprint(\"Confusion Matrix:\\n\", conf_matrix)\nprint(\"Classification Report:\\n\", class_report)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T18:23:09.848473Z","iopub.execute_input":"2025-09-02T18:23:09.848754Z","iopub.status.idle":"2025-09-02T18:23:09.904900Z","shell.execute_reply.started":"2025-09-02T18:23:09.848737Z","shell.execute_reply":"2025-09-02T18:23:09.904365Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.7857142857142857\nConfusion Matrix:\n [[90 14]\n [19 31]]\nClassification Report:\n               precision    recall  f1-score   support\n\n           0       0.83      0.87      0.85       104\n           1       0.69      0.62      0.65        50\n\n    accuracy                           0.79       154\n   macro avg       0.76      0.74      0.75       154\nweighted avg       0.78      0.79      0.78       154\n\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"acc = accuracy_score(y_test, y_pred)\nprec = precision_score(y_test, y_pred)\nrec = recall_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\n\nprint(\"Accuracy (sklearn):\", acc)\nprint(\"Precision (sklearn):\", prec)\nprint(\"Recall (sklearn):\", rec)\nprint(\"F1-score (sklearn):\", f1)\n\ncm = confusion_matrix(y_test, y_pred)\nprint(\"\\nConfusion Matrix:\\n\", cm)\n\nTN, FP, FN, TP = cm.ravel()\n\naccuracy_manual = (TP + TN) / (TP + TN + FP + FN)\nprecision_manual = TP / (TP + FP) if (TP+FP) > 0 else 0\nrecall_manual = TP / (TP + FN) if (TP+FN) > 0 else 0\nf1_manual = 2 * (precision_manual * recall_manual) / (precision_manual + recall_manual)\n\nprint(\"\\nManual Calculations:\")\nprint(\"Accuracy (manual):\", accuracy_manual)\nprint(\"Precision (manual):\", precision_manual)\nprint(\"Recall (manual):\", recall_manual)\nprint(\"F1-score (manual):\", f1_manual)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T18:23:34.819925Z","iopub.execute_input":"2025-09-02T18:23:34.820214Z","iopub.status.idle":"2025-09-02T18:23:34.835371Z","shell.execute_reply.started":"2025-09-02T18:23:34.820192Z","shell.execute_reply":"2025-09-02T18:23:34.834671Z"}},"outputs":[{"name":"stdout","text":"Accuracy (sklearn): 0.7857142857142857\nPrecision (sklearn): 0.6888888888888889\nRecall (sklearn): 0.62\nF1-score (sklearn): 0.6526315789473685\n\nConfusion Matrix:\n [[90 14]\n [19 31]]\n\nManual Calculations:\nAccuracy (manual): 0.7857142857142857\nPrecision (manual): 0.6888888888888889\nRecall (manual): 0.62\nF1-score (manual): 0.6526315789473685\n","output_type":"stream"}],"execution_count":17}]}